#!/home/fred/qvenv/bin/python3
import atexit
import os
import signal
import sys
import time

def daemonize(pid_file: str, log_file: str, prog_name: str):
    """
    pid_file: full path of pid file, it is suggested in /tmp
    log_file: full path of log file.
    """
    # This is a daemon programe, which will start after
    # system booted.
    #
    # It is defined to start by rc.local.
    #
    # fork a sub process from father

    # check pid file，if it exists, raise RuntimeError

    if os.path.exists(pid_file):
        raise RuntimeError(f"{prog_name} is already running")
    try:
        # the first fork.
        if os.fork() > 0:
            raise SystemExit(0)
    except OSError as e:
        raise RuntimeError(f"fork #1 failed.")

    os.chdir('/')
    os.umask(0)
    os.setsid()
    try:
        # Second fork
        if os.fork() > 0:
            raise SystemExit(0)
    except OSError as e:
        raise RuntimeError(f"fork #2 failed.")
    
    # Flush I/O buffers
    sys.stdout.flush()
    sys.stderr.flush()

    # with open(log_file, 'rb', 0) as read_null:
    # os.dup2(read_null.fileno(), sys.stdin.fileno())
    with open(log_file, 'a') as write_null:
        # Redirect to 1 which means stdout
        os.dup2(write_null.fileno(), 1)
    with open(log_file, 'a') as error_null:
        # Redirect to 2 which means stderr
        os.dup2(error_null.fileno(), 2)
    # write parent process pid into pid file.
    if pid_file:
        with open(pid_file, 'w+') as f:
            f.write(str(os.getpid()))
        atexit.register(os.remove, pid_file)
    # register signal handler
    def sigterm_handler(signo, frame):
        raise SystemExit(1)
    signal.signal(signal.SIGTERM, sigterm_handler)

def log_monitor(log_file: str):
    # q: 如何创建一个循环运行的进程，不停地监控log文件，如果log文件被删除了就重新创建它
    # a: 可以使用os.path.exists()函数来判断文件是否存在，如果不存在就创建文件
    while True:
        if not os.path.exists(log_file):
            with open(log_file, 'w') as f:
                pass
        time.sleep(30)


def main():
    # 每隔1分钟打印一次当前时间
    import time
    while True:
        # q: 如何创建一个循环运行的进程，不停地监控log文件，如果log文件被删除了就重新创建它
        # a: 可以使用os.path.exists()函数来判断文件是否存在，如果不存在就创建文件


        print(time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()))
        time.sleep(60)







if __name__ == '__main__':
    PID_FILE = '/tmp/daemon.pid'
    LOG_FILE = '/tmp/daemon.log'
    PROG_NAME = 'daemon'
    if len(sys.argv) != 2:
        print(f"Usage: [start|stop|restart|status|help|version]")
        raise SystemExit(1)
    else:
        if sys.argv[1] == 'start':
            if os.path.exists(PID_FILE):
                print(f"{PROG_NAME} is running, try to restart.", file=sys.stderr)
            else:
                try:
                    daemonize(PID_FILE, LOG_FILE, PROG_NAME)
                except RuntimeError as e:
                    print(e, file=sys.stderr)
                    raise SystemExit(1)
                main()
        elif sys.argv[1] == 'stop':
            if os.path.exists(PID_FILE):
                with open(PID_FILE) as f:
                    os.kill(int(f.read()), signal.SIGTERM)
            else:
                print(f"{PROG_NAME} is not running", file=sys.stderr)
                raise SystemExit(1)
        elif sys.argv[1] == 'restart':
            if os.path.exists(PID_FILE):
                with open(PID_FILE) as f:
                    os.kill(int(f.read()), signal.SIGTERM)
                print(f"{PROG_NAME} is restarting", file=sys.stderr)
            try:
                daemonize(PID_FILE, LOG_FILE, PROG_NAME)
            except RuntimeError as e:
                print(e, file=sys.stderr)
                raise SystemExit(1)
            main()
        elif sys.argv[1] == 'status':
            if os.path.exists(PID_FILE):
                with open(PID_FILE) as f:
                    print(f"{PROG_NAME} is running as pid {f.read()}")
            else:
                print(f"{PROG_NAME} is not running", file=sys.stderr)
                raise SystemExit(1)
        elif sys.argv[1] == 'help':
            with open('HELP') as f:
                print(f.read())
        elif sys.argv[1] == 'version':
            print("1.0")
        else:
            print(f"Unknown command {sys.argv[1]}", file=sys.stderr)
            raise SystemExit(1)
